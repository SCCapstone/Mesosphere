// const { reloadApp } = require('detox-expo-helpers');

describe('LandingElements', () => {
  beforeAll(async () => {
    await device.launchApp({launchArgs: { detoxDebugVisibility: "YES",},})
    // await reloadApp();
  })
  beforeEach(async () => {
    await device.reloadReactNative()
  })

  test('LoginScreenDisplays', async () => {
    await expect(element(by.id('LoginUserPrompt'))).toBeVisible()
    await expect(element(by.id('LoginPassPrompt'))).toBeVisible()
    await expect(element(by.id('LoginButton'))).toBeVisible()
    await expect(element(by.id('RegisterButton'))).toBeVisible()
  })

  test('RegisteringScreenDisplays', async () => {
    await expect(element(by.id('RegisterButton')))
    await element(by.id('RegisterButton')).tap();
    await expect(element(by.id('RegisterUserPrompt'))).toBeVisible()
    await expect(element(by.id('RegisterPassPrompt'))).toBeVisible()
    await expect(element(by.id('RegisterNamePrompt'))).toBeVisible()
    await expect(element(by.id('RegisterBioPrompt'))).toBeVisible()
    await expect(element(by.id('MakeAccButton'))).toBeVisible()
    await expect(element(by.id('CancelButton'))).toBeVisible()
  })
})

describe('Account Tests', () => {
  beforeAll(async () => {
    await device.launchApp({launchArgs: { detoxDebugVisibility: "YES",},})
    // await reloadApp();
  })
  beforeEach(async () => {
    await device.reloadReactNative()
  })

  test('CreateAccount', async () => {
    await expect(element(by.id('RegisterButton'))).toBeVisible()
    await element(by.id('RegisterButton')).tap()
    await element(by.id('RegisterUserPrompt')).typeText('Testing')
    await element(by.id('RegisterPassPrompt')).typeText('testingpass')
    await element(by.id('RegisterNamePrompt')).typeText('Detox')
    await element(by.id('RegisterBioPrompt')).typeText('I\'m making sure you didn\'t break anything.')
    await element(by.id('MakeAccButton')).tap()
    await waitFor(element(by.text("Welcome back, Detox"))).toBeVisible().withTimeout(5000)
    await expect(element(by.id('NotificationsButton'))).toBeVisible()
    await expect(element(by.id('SettingsButton'))).toBeVisible()
    await expect(element(by.id('LogoutButton'))).toBeVisible()
  })

  test('Log Out Detox Account', async () => {
    await expect(element(by.text("Welcome back, Detox"))).toBeVisible()
    await expect(element(by.id('NotificationsButton'))).toBeVisible()
    await expect(element(by.id('SettingsButton'))).toBeVisible()
    await expect(element(by.id('LogoutButton'))).toBeVisible()
    await element(by.id('LogoutButton')).tap()
    await expect(element(by.id('LoginUserPrompt'))).toBeVisible()
    await expect(element(by.id('LoginPassPrompt'))).toBeVisible()
    await expect(element(by.id('LoginButton'))).toBeVisible()
    await expect(element(by.id('RegisterButton'))).toBeVisible()
  })

  test('Log In To Detox Account', async () => {
    await expect(element(by.id('LoginUserPrompt'))).toBeVisible()
    await expect(element(by.id('LoginPassPrompt'))).toBeVisible()
    await expect(element(by.id('LoginButton')))
    await element(by.id('LoginUserPrompt')).typeText('Testing')
    await element(by.id('LoginPassPrompt')).typeText('testingpass')
    await element(by.id('LoginButton')).tap()
    await waitFor(element(by.text("Welcome back, Detox"))).toBeVisible().withTimeout(5000)
    await expect(element(by.id('NotificationsButton'))).toBeVisible()
    await expect(element(by.id('SettingsButton'))).toBeVisible()
    await expect(element(by.id('LogoutButton'))).toBeVisible()
  })

  test('Check Settings Screen Elements', async () => {
    await waitFor(element(by.text("Welcome back, Detox"))).toBeVisible().withTimeout(5000)
    await expect(element(by.id('NotificationsButton'))).toBeVisible()
    await expect(element(by.id('SettingsButton'))).toBeVisible()
    await expect(element(by.id('LogoutButton'))).toBeVisible()
    await element(by.id('SettingsButton')).tap()
    await expect(element(by.id('SettingsBackButton'))).toBeVisible()
    await expect(element(by.id('SettingsViewPostsButton'))).toBeVisible()
    await expect(element(by.id('SettingsChangeDisplayButton'))).toBeVisible()
    await expect(element(by.id('SettingsChangePassButton'))).toBeVisible()
    await expect(element(by.id('SettingsChangeBioButton'))).toBeVisible()
    await expect(element(by.id('SettingsDeleteAccButton'))).toBeVisible()
  })

  //Add a "change password" test
  test('Change Detox Password', async () => {
    await waitFor(element(by.text("Welcome back, Detox"))).toBeVisible().withTimeout(5000)
    await expect(element(by.id('NotificationsButton'))).toBeVisible()
    await expect(element(by.id('SettingsButton'))).toBeVisible()
    await expect(element(by.id('LogoutButton'))).toBeVisible()
    await element(by.id('SettingsButton')).tap()
    await expect(element(by.id('SettingsBackButton'))).toBeVisible()
    await expect(element(by.id('SettingsChangePassButton'))).toBeVisible()
    await element(by.id('SettingsChangePassButton')).tap()
    await expect(element(by.id('ChangePassTextField')))
    await expect(element(by.id('ChangePassTextField'))).toBeVisible()
    await expect(element(by.id('ChangePassSubmitButton'))).toBeVisible()
    await element(by.id('ChangePassTextField')).typeText('doggies123')
    await element(by.id('ChangePassSubmitButton')).tap()
    await expect(element(by.id('SettingsBackButton'))).toBeVisible()
    await element(by.id('SettingsBackButton')).tap()
    await waitFor(element(by.text("Welcome back, Detox"))).toBeVisible().withTimeout(5000)
    await expect(element(by.id('NotificationsButton'))).toBeVisible()
    await expect(element(by.id('SettingsButton'))).toBeVisible()
    await expect(element(by.id('LogoutButton'))).toBeVisible()
    await element(by.id('LogoutButton')).tap()
    await expect(element(by.id('LoginButton'))).toBeVisible()
    await element(by.id('LoginUserPrompt')).typeText('Testing')
    await element(by.id('LoginPassPrompt')).typeText('testingpass')
    await element(by.id('LoginButton')).tap()
    await expect(element(by.text('Incorrect username and/or password.'))).toBeVisible()
    await waitFor(element(by.text('OK'))).toBeVisible().withTimeout(5000)
    await element(by.text('OK')).tap()
    await element(by.id('LoginUserPrompt')).clearText();
    await element(by.id('LoginPassPrompt')).clearText();
    await element(by.id('LoginUserPrompt')).typeText('Testing')
    await element(by.id('LoginPassPrompt')).typeText('doggies123')
    await element(by.id('LoginButton')).tap()
    await waitFor(element(by.text("Welcome back, Detox"))).toBeVisible().withTimeout(5000)
    await expect(element(by.id('NotificationsButton'))).toBeVisible()
    await expect(element(by.id('SettingsButton'))).toBeVisible()
    await expect(element(by.id('LogoutButton'))).toBeVisible()
  })

  test('Delete Detox Account', async () => {
    await waitFor(element(by.text("Welcome back, Detox"))).toBeVisible().withTimeout(5000)
    await expect(element(by.id('NotificationsButton'))).toBeVisible()
    await expect(element(by.id('SettingsButton'))).toBeVisible()
    await expect(element(by.id('LogoutButton'))).toBeVisible()
    await element(by.id('SettingsButton')).tap()
    await expect(element(by.id('SettingsDeleteAccButton'))).toBeVisible()
    await element(by.id('SettingsDeleteAccButton')).tap()
    await expect(element(by.id('LoginUserPrompt'))).toBeVisible()
    await expect(element(by.id('LoginPassPrompt'))).toBeVisible()
    await expect(element(by.id('LoginButton'))).toBeVisible()
    await expect(element(by.id('RegisterButton'))).toBeVisible()
  })

  test('Log In to Deleted Account', async () => {
    await expect(element(by.id('LoginButton'))).toBeVisible()
    await element(by.id('LoginUserPrompt')).typeText('Testing')
    await element(by.id('LoginPassPrompt')).typeText('doggies123')
    await element(by.id('LoginButton')).tap()
    await expect(element(by.text('Incorrect username and/or password.'))).toBeVisible()
    await waitFor(element(by.text('OK'))).toBeVisible().withTimeout(5000)
    await element(by.text('OK')).tap()
  })
})

describe('Post and Networking', () => {
  beforeAll(async () => {
    await device.launchApp({launchArgs: { detoxDebugVisibility: "YES",},})
    // await reloadApp();
  })
  beforeEach(async () => {
    await device.reloadReactNative()
  })

  
  test('View Local Posts', async () => {
    await expect(element(by.id('RegisterButton'))).toBeVisible()
    await element(by.id('RegisterButton')).tap()
    await element(by.id('RegisterUserPrompt')).typeText('Testing')
    await element(by.id('RegisterPassPrompt')).typeText('testingpass')
    await element(by.id('RegisterNamePrompt')).typeText('Detox')
    await element(by.id('RegisterBioPrompt')).typeText('I\'m making sure you didn\'t break anything.')
    await element(by.id('MakeAccButton')).tap()
    await waitFor(element(by.text("Welcome back, Detox"))).toBeVisible().withTimeout(5000)
    await expect(element(by.id('NotificationsButton'))).toBeVisible()
    await expect(element(by.id('SettingsButton'))).toBeVisible()
    await expect(element(by.id('LogoutButton'))).toBeVisible()
    await expect(element(by.id('bottomAccountButton'))).toBeVisible()
    await expect(element(by.id('bottomNetworkButton'))).toBeVisible()
    await expect(element(by.id('bottomFriendsButton'))).toBeVisible()
    await expect(element(by.id('bottomPostButton'))).toBeVisible()
    await element(by.id('bottomPostButton')).tap();
    await expect(element(by.id('MakePostTextField'))).toBeVisible()
    await expect(element(by.id('MakePostSubmitButton'))).toBeVisible()
    await element(by.id('MakePostTextField')).typeText('Hello World!')
    await element(by.id('MakePostSubmitButton')).tap()
    await waitFor(element(by.id('PostScreenComponent'))).toBeVisible(20).withTimeout(5000)
    await waitFor(element(by.id('PostFlatlist'))).toExist().withTimeout(5000)
    await waitFor(element(by.id('PostFlatlist'))).toBeVisible(20).withTimeout(5000)
    const attributes = await element(by.id('PostFlatlist')).getAttributes()
    const jestExpect = require('expect');
    jestExpect(attributes.height > 300).toBe(true);
  })

  
  test('Rating Local Post', async () => {
    await waitFor(element(by.text("Welcome back, Detox"))).toBeVisible().withTimeout(5000)
    await expect(element(by.id('NotificationsButton'))).toBeVisible()
    await expect(element(by.id('SettingsButton'))).toBeVisible()
    await expect(element(by.id('LogoutButton'))).toBeVisible()
    await expect(element(by.id('bottomAccountButton'))).toBeVisible()
    await expect(element(by.id('bottomNetworkButton'))).toBeVisible()
    await expect(element(by.id('bottomFriendsButton'))).toBeVisible()
    await expect(element(by.id('bottomPostButton'))).toBeVisible()
    await element(by.id('bottomNetworkButton')).tap()
    await waitFor(element(by.id('PostScreenComponent'))).toBeVisible(20).withTimeout(5000)
    await waitFor(element(by.id('PostFlatlist'))).toExist().withTimeout(5000)
    await waitFor(element(by.id('PostFlatlist'))).toBeVisible(20).withTimeout(5000)
    const attributes = await element(by.id('PostFlatlist')).getAttributes()
    const jestExpect = require('expect');
    jestExpect(attributes.height > 200).toBe(true);
    await expect(element(by.text('0'))).toBeVisible()
    await element(by.id('PostFlatlist')).tap({x:(150/3), y:(330/3)})
    await waitFor(element(by.text("1"))).toBeVisible().withTimeout(5000)
    await element(by.id('PostFlatlist')).tap({x:(360/3), y:(330/3)})
    await waitFor(element(by.text("-1"))).toBeVisible().withTimeout(5000)
    await element(by.id('PostFlatlist')).tap({x:(360/3), y:(330/3)})
    await waitFor(element(by.text("0"))).toBeVisible().withTimeout(5000)
  })
  
  test('Deleting Local Post', async () => {
    await waitFor(element(by.text("Welcome back, Detox"))).toBeVisible().withTimeout(5000)
    await expect(element(by.id('NotificationsButton'))).toBeVisible()
    await expect(element(by.id('SettingsButton'))).toBeVisible()
    await expect(element(by.id('LogoutButton'))).toBeVisible()
    await expect(element(by.id('bottomAccountButton'))).toBeVisible()
    await expect(element(by.id('bottomNetworkButton'))).toBeVisible()
    await expect(element(by.id('bottomFriendsButton'))).toBeVisible()
    await expect(element(by.id('bottomPostButton'))).toBeVisible()
    await element(by.id('bottomNetworkButton')).tap()
    await waitFor(element(by.id('PostScreenComponent'))).toBeVisible(20).withTimeout(5000)
    await waitFor(element(by.id('PostFlatlist'))).toExist().withTimeout(5000)
    await waitFor(element(by.id('PostFlatlist'))).toBeVisible(20).withTimeout(5000)
    const attributes = await element(by.id('PostFlatlist')).getAttributes()
    const jestExpect = require('expect');
    jestExpect(attributes.height > 200).toBe(true);
    await element(by.id('PostFlatlist')).tap({x:(1000/3), y:(350/3)})
    await waitFor(element(by.id('PostFlatlist'))).toExist().withTimeout(5000)
    const attributes2 = await element(by.id('PostFlatlist')).getAttributes()
    console.log(attributes2.height)
    jestExpect(attributes2.height < 200).toBe(true);
  })
  
  
  test('Add a Friend', async () => {
    await waitFor(element(by.text("Welcome back, Detox"))).toBeVisible().withTimeout(5000)
    await expect(element(by.id('AccountMiD'))).toBeVisible()
    await expect(element(by.id('NotificationsButton'))).toBeVisible()
    await expect(element(by.id('SettingsButton'))).toBeVisible()
    await expect(element(by.id('LogoutButton'))).toBeVisible()
    DetoxId = await element(by.id('AccountMiD')).getAttributes()
    console.log("Detox ID read as: " + DetoxId.text)
    await element(by.id('LogoutButton')).tap()
    await expect(element(by.id('RegisterButton'))).toBeVisible()
    await element(by.id('RegisterButton')).tap()
    await element(by.id('RegisterUserPrompt')).typeText('Testing2')
    await element(by.id('RegisterPassPrompt')).typeText('testingpass2')
    await element(by.id('RegisterNamePrompt')).typeText('Detox\'s Best Friend')
    await element(by.id('RegisterBioPrompt')).typeText('I\'m helping! :D')
    await element(by.id('MakeAccButton')).tap()
    console.log("Checking for \'Welcome back, Detox\'s Best Friend\'")
    await waitFor(element(by.text("Welcome back, Detox\'s Best Friend"))).toBeVisible().withTimeout(5000)
    await expect(element(by.id('AccountMiD'))).toBeVisible()
    await expect(element(by.id('NotificationsButton'))).toBeVisible()
    await expect(element(by.id('SettingsButton'))).toBeVisible()
    await expect(element(by.id('LogoutButton'))).toBeVisible()
    DetoxFriendId = await element(by.id('AccountMiD')).getAttributes()
    console.log("Detox Friend ID read as: " + DetoxFriendId.text)
    await expect(element(by.id('bottomAccountButton'))).toBeVisible()
    await expect(element(by.id('bottomNetworkButton'))).toBeVisible()
    await expect(element(by.id('bottomFriendsButton'))).toBeVisible()
    await expect(element(by.id('bottomPostButton'))).toBeVisible()
    await element(by.id('bottomFriendsButton')).tap()
    await expect(element(by.id('FriendSearchBar'))).toBeVisible()
    await element(by.id('FriendSearchBar')).typeText(DetoxId.text)
    await waitFor(element(by.text('Add Friend ' + DetoxId.text + '?'))).toBeVisible().withTimeout(5000)
    await element(by.text('Add Friend ' + DetoxId.text + '?')).tap()
    await element(by.text('Add Friend ' + DetoxId.text + '?')).tap()
    console.log("element tapped!")
    await waitFor(element(by.text('Are you sure you want to add ' + DetoxId.text + '?'))).toBeVisible().withTimeout(5000)
    await waitFor(element(by.text('OK'))).toBeVisible().withTimeout(5000)
    await element(by.text('OK')).tap()
    await waitFor(element(by.text('Detox (Pending)'))).toBeVisible().withTimeout(5000)
    await expect(element(by.id('bottomAccountButton'))).toBeVisible()
    await expect(element(by.id('bottomNetworkButton'))).toBeVisible()
    await expect(element(by.id('bottomFriendsButton'))).toBeVisible()
    await expect(element(by.id('bottomPostButton'))).toBeVisible()
    await element(by.id('bottomAccountButton')).tap()
    await waitFor(element(by.text("Welcome back, Detox\'s Best Friend"))).toBeVisible().withTimeout(5000)
    await expect(element(by.id('AccountMiD'))).toBeVisible()
    await expect(element(by.id('NotificationsButton'))).toBeVisible()
    await expect(element(by.id('SettingsButton'))).toBeVisible()
    await expect(element(by.id('LogoutButton'))).toBeVisible()
    await element(by.id('LogoutButton')).tap()
    await element(by.id('LoginUserPrompt')).typeText('Testing')
    await element(by.id('LoginPassPrompt')).typeText('testingpass')
    await element(by.id('LoginButton')).tap()
    await waitFor(element(by.text("Welcome back, Detox"))).toBeVisible().withTimeout(5000)
    await expect(element(by.id('NotificationsButton'))).toBeVisible()
    await expect(element(by.id('SettingsButton'))).toBeVisible()
    await expect(element(by.id('LogoutButton'))).toBeVisible()
    await expect(element(by.text('1'))).toBeVisible()
    await element(by.id('NotificationsButton')).tap()
    await expect(element(by.text('The user ' + DetoxFriendId.text + ' wants to be your friend!'))).toBeVisible()
    await element(by.text('The user ' + DetoxFriendId.text + ' wants to be your friend!')).tap()
    await waitFor(element(by.text('Would you like to add Detox\'s Best Friend (' + DetoxFriendId.text + ') back and become friends?'))).toBeVisible().withTimeout(5000)
    await waitFor(element(by.text('Yes'))).toBeVisible().withTimeout(5000)
    await element(by.text('Yes')).tap()
    await waitFor(element(by.id('NotificationsBackButton'))).toBeVisible().withTimeout(5000)
    await element(by.id('NotificationsBackButton')).tap()
    await waitFor(element(by.text("Welcome back, Detox"))).toBeVisible().withTimeout(5000)
    await expect(element(by.id('NotificationsButton'))).toBeVisible()
    await expect(element(by.id('SettingsButton'))).toBeVisible()
    await expect(element(by.id('LogoutButton'))).toBeVisible()
    await expect(element(by.id('bottomAccountButton'))).toBeVisible()
    await expect(element(by.id('bottomNetworkButton'))).toBeVisible()
    await expect(element(by.id('bottomFriendsButton'))).toBeVisible()
    await expect(element(by.id('bottomPostButton'))).toBeVisible()
    await element(by.id('bottomFriendsButton')).tap()
    await waitFor(element(by.text('Detox\'s Best Friend'))).toBeVisible().withTimeout(5000)
    await expect(element(by.id('bottomAccountButton'))).toBeVisible()
    await expect(element(by.id('bottomNetworkButton'))).toBeVisible()
    await expect(element(by.id('bottomFriendsButton'))).toBeVisible()
    await expect(element(by.id('bottomPostButton'))).toBeVisible()
    await element(by.id('bottomAccountButton')).tap()
    await waitFor(element(by.text("Welcome back, Detox"))).toBeVisible().withTimeout(5000)
    await expect(element(by.id('NotificationsButton'))).toBeVisible()
    await expect(element(by.id('SettingsButton'))).toBeVisible()
    await expect(element(by.id('LogoutButton'))).toBeVisible()
    await element(by.id('LogoutButton')).tap()
    await element(by.id('LoginUserPrompt')).typeText('Testing2')
    await element(by.id('LoginPassPrompt')).typeText('testingpass2')
    await element(by.id('LoginButton')).tap()
    await waitFor(element(by.text("Welcome back, Detox\'s Best Friend"))).toBeVisible().withTimeout(5000)
    await expect(element(by.id('AccountMiD'))).toBeVisible()
    await expect(element(by.id('NotificationsButton'))).toBeVisible()
    await expect(element(by.id('SettingsButton'))).toBeVisible()
    await expect(element(by.id('LogoutButton'))).toBeVisible()
    await expect(element(by.id('bottomAccountButton'))).toBeVisible()
    await expect(element(by.id('bottomNetworkButton'))).toBeVisible()
    await expect(element(by.id('bottomFriendsButton'))).toBeVisible()
    await expect(element(by.id('bottomPostButton'))).toBeVisible()
    await element(by.id('bottomFriendsButton')).tap()
    await waitFor(element(by.text('Detox'))).toBeVisible().withTimeout(5000)
  })

  //Consider adding a rate check?
  test('View & Score Friend\'s Post', async () => {
    await waitFor(element(by.text("Welcome back, Detox\'s Best Friend"))).toBeVisible().withTimeout(5000)
    await expect(element(by.id('AccountMiD'))).toBeVisible()
    await expect(element(by.id('NotificationsButton'))).toBeVisible()
    await expect(element(by.id('SettingsButton'))).toBeVisible()
    await expect(element(by.id('LogoutButton'))).toBeVisible()
    await expect(element(by.id('bottomAccountButton'))).toBeVisible()
    await expect(element(by.id('bottomNetworkButton'))).toBeVisible()
    await expect(element(by.id('bottomFriendsButton'))).toBeVisible()
    await expect(element(by.id('bottomPostButton'))).toBeVisible()
    await element(by.id('bottomPostButton')).tap()
    await expect(element(by.id('MakePostTextField'))).toBeVisible()
    await expect(element(by.id('MakePostSubmitButton'))).toBeVisible()
    await element(by.id('MakePostTextField')).typeText('Hello Detox! :D')
    await element(by.id('MakePostSubmitButton')).tap()
    await waitFor(element(by.id('PostScreenComponent'))).toBeVisible(20).withTimeout(5000)
    await waitFor(element(by.id('PostFlatlist'))).toExist().withTimeout(5000)
    await waitFor(element(by.id('PostFlatlist'))).toBeVisible(20).withTimeout(5000)
    const attributes = await element(by.id('PostFlatlist')).getAttributes()
    const jestExpect = require('expect')
    console.log(attributes.height)
    jestExpect(attributes.height > 300).toBe(true)
    await expect(element(by.text('0'))).toBeVisible()
    await expect(element(by.id('bottomAccountButton'))).toBeVisible()
    await expect(element(by.id('bottomNetworkButton'))).toBeVisible()
    await expect(element(by.id('bottomFriendsButton'))).toBeVisible()
    await expect(element(by.id('bottomPostButton'))).toBeVisible()
    await element(by.id('bottomAccountButton')).tap()
    await waitFor(element(by.text("Welcome back, Detox\'s Best Friend"))).toBeVisible().withTimeout(5000)
    await expect(element(by.id('NotificationsButton'))).toBeVisible()
    await expect(element(by.id('SettingsButton'))).toBeVisible()
    await expect(element(by.id('LogoutButton'))).toBeVisible()
    await element(by.id('LogoutButton')).tap()
    await element(by.id('LoginUserPrompt')).typeText('Testing')
    await element(by.id('LoginPassPrompt')).typeText('testingpass')
    await element(by.id('LoginButton')).tap()
    await waitFor(element(by.text("Welcome back, Detox"))).toBeVisible().withTimeout(5000)
    await expect(element(by.id('AccountMiD'))).toBeVisible()
    await expect(element(by.id('NotificationsButton'))).toBeVisible()
    await expect(element(by.id('SettingsButton'))).toBeVisible()
    await expect(element(by.id('LogoutButton'))).toBeVisible()
    await expect(element(by.id('bottomAccountButton'))).toBeVisible()
    await expect(element(by.id('bottomNetworkButton'))).toBeVisible()
    await expect(element(by.id('bottomFriendsButton'))).toBeVisible()
    await expect(element(by.id('bottomPostButton'))).toBeVisible()
    await element(by.id('bottomNetworkButton')).tap()
    await waitFor(element(by.id('PostScreenComponent'))).toBeVisible(20).withTimeout(5000)
    await waitFor(element(by.id('PostFlatlist'))).toExist().withTimeout(5000)
    await waitFor(element(by.id('PostFlatlist'))).toBeVisible(20).withTimeout(5000)
    const attributes2 = await element(by.id('PostFlatlist')).getAttributes()
    jestExpect(attributes2.height > 300).toBe(true);
    await waitFor(element(by.text("0"))).toBeVisible().withTimeout(5000)
    await element(by.id('PostFlatlist')).tap({x:(150/3), y:(330/3)})
    await waitFor(element(by.text("1"))).toBeVisible().withTimeout(5000)
    await expect(element(by.id('bottomAccountButton'))).toBeVisible()
    await expect(element(by.id('bottomNetworkButton'))).toBeVisible()
    await expect(element(by.id('bottomFriendsButton'))).toBeVisible()
    await expect(element(by.id('bottomPostButton'))).toBeVisible()
    await element(by.id('bottomAccountButton')).tap()
    await waitFor(element(by.text("Welcome back, Detox"))).toBeVisible().withTimeout(5000)
    await expect(element(by.id('NotificationsButton'))).toBeVisible()
    await expect(element(by.id('SettingsButton'))).toBeVisible()
    await expect(element(by.id('LogoutButton'))).toBeVisible()
    await element(by.id('LogoutButton')).tap()
    await element(by.id('LoginUserPrompt')).typeText('Testing2')
    await element(by.id('LoginPassPrompt')).typeText('testingpass2')
    await element(by.id('LoginButton')).tap()
    await waitFor(element(by.text("Welcome back, Detox\'s Best Friend"))).toBeVisible().withTimeout(5000)
    await expect(element(by.id('AccountMiD'))).toBeVisible()
    await expect(element(by.id('NotificationsButton'))).toBeVisible()
    await expect(element(by.id('SettingsButton'))).toBeVisible()
    await expect(element(by.id('LogoutButton'))).toBeVisible()
    await expect(element(by.id('bottomAccountButton'))).toBeVisible()
    await expect(element(by.id('bottomNetworkButton'))).toBeVisible()
    await expect(element(by.id('bottomFriendsButton'))).toBeVisible()
    await expect(element(by.id('bottomPostButton'))).toBeVisible()
    await element(by.id('bottomNetworkButton')).tap()
    await waitFor(element(by.id('PostScreenComponent'))).toBeVisible(20).withTimeout(5000)
    await waitFor(element(by.id('PostFlatlist'))).toExist().withTimeout(5000)
    await waitFor(element(by.id('PostFlatlist'))).toBeVisible(20).withTimeout(5000)
    const attributes3 = await element(by.id('PostFlatlist')).getAttributes()
    jestExpect(attributes3.height > 300).toBe(true);
    await waitFor(element(by.text("1"))).toBeVisible().withTimeout(5000)
    await element(by.id('PostFlatlist')).tap({x:(150/3), y:(330/3)})
    await waitFor(element(by.text("2"))).toBeVisible().withTimeout(5000)
  })

  test('Remove a Friend', async () => {
    await waitFor(element(by.text("Welcome back, Detox\'s Best Friend"))).toBeVisible().withTimeout(5000)
    await expect(element(by.id('AccountMiD'))).toBeVisible()
    await expect(element(by.id('NotificationsButton'))).toBeVisible()
    await expect(element(by.id('SettingsButton'))).toBeVisible()
    await expect(element(by.id('LogoutButton'))).toBeVisible()
    await element(by.id('LogoutButton')).tap()
    await element(by.id('LoginUserPrompt')).typeText('Testing')
    await element(by.id('LoginPassPrompt')).typeText('testingpass')
    await element(by.id('LoginButton')).tap()
    await waitFor(element(by.text("Welcome back, Detox"))).toBeVisible().withTimeout(5000)
    await expect(element(by.id('AccountMiD'))).toBeVisible()
    await expect(element(by.id('NotificationsButton'))).toBeVisible()
    await expect(element(by.id('SettingsButton'))).toBeVisible()
    await expect(element(by.id('LogoutButton'))).toBeVisible()
    await expect(element(by.id('bottomAccountButton'))).toBeVisible()
    await expect(element(by.id('bottomNetworkButton'))).toBeVisible()
    await expect(element(by.id('bottomFriendsButton'))).toBeVisible()
    await expect(element(by.id('bottomPostButton'))).toBeVisible()
    await element(by.id('bottomNetworkButton')).tap()
    await waitFor(element(by.id('PostScreenComponent'))).toBeVisible(20).withTimeout(5000)
    await waitFor(element(by.id('PostFlatlist'))).toExist().withTimeout(5000)
    await waitFor(element(by.id('PostFlatlist'))).toBeVisible(20).withTimeout(5000)
    const attributes = await element(by.id('PostFlatlist')).getAttributes()
    const jestExpect = require('expect');
    jestExpect(attributes.height > 300).toBe(true);
    await expect(element(by.id('bottomAccountButton'))).toBeVisible()
    await expect(element(by.id('bottomNetworkButton'))).toBeVisible()
    await expect(element(by.id('bottomFriendsButton'))).toBeVisible()
    await expect(element(by.id('bottomPostButton'))).toBeVisible()
    await element(by.id('bottomFriendsButton')).tap()
    await waitFor(element(by.text('Detox\'s Best Friend'))).toBeVisible().withTimeout(5000)
    await element(by.text('Detox\'s Best Friend')).tap()
    await waitFor(element(by.text('I\'m helping! :D'))).toBeVisible().withTimeout(5000)
    await expect(element(by.text('REMOVE FRIEND'))).toBeVisible()
    await element(by.text('REMOVE FRIEND')).tap()
    await waitFor(element(by.text('Detox\'s Best Friend'))).not.toBeVisible().withTimeout(5000)
    await expect(element(by.id('bottomAccountButton'))).toBeVisible()
    await expect(element(by.id('bottomNetworkButton'))).toBeVisible()
    await expect(element(by.id('bottomFriendsButton'))).toBeVisible()
    await expect(element(by.id('bottomPostButton'))).toBeVisible()
    await element(by.id('bottomNetworkButton')).tap()
    await waitFor(element(by.id('PostFlatlist'))).toExist().withTimeout(5000)
    const attributes2 = await element(by.id('PostFlatlist')).getAttributes()
    console.log(attributes2.height)
    jestExpect(attributes2.height < 200).toBe(true);
  })

  test('Delete Both Accounts (Cleanup Test)', async () => {
    await waitFor(element(by.text("Welcome back, Detox"))).toBeVisible().withTimeout(5000)
    await expect(element(by.id('NotificationsButton'))).toBeVisible()
    await expect(element(by.id('SettingsButton'))).toBeVisible()
    await expect(element(by.id('LogoutButton'))).toBeVisible()
    await element(by.id('SettingsButton')).tap()
    await expect(element(by.id('SettingsDeleteAccButton'))).toBeVisible()
    await element(by.id('SettingsDeleteAccButton')).tap()
    await expect(element(by.id('LoginUserPrompt'))).toBeVisible()
    await expect(element(by.id('LoginPassPrompt'))).toBeVisible()
    await expect(element(by.id('LoginButton'))).toBeVisible()
    await expect(element(by.id('RegisterButton'))).toBeVisible()
    await element(by.id('LoginUserPrompt')).typeText('Testing2')
    await element(by.id('LoginPassPrompt')).typeText('testingpass2')
    await element(by.id('LoginButton')).tap()
    await waitFor(element(by.text("Welcome back, Detox\'s Best Friend"))).toBeVisible().withTimeout(5000)
    await expect(element(by.id('AccountMiD'))).toBeVisible()
    await expect(element(by.id('NotificationsButton'))).toBeVisible()
    await expect(element(by.id('SettingsButton'))).toBeVisible()
    await expect(element(by.id('LogoutButton'))).toBeVisible()
    await element(by.id('SettingsButton')).tap()
    await expect(element(by.id('SettingsDeleteAccButton'))).toBeVisible()
    await element(by.id('SettingsDeleteAccButton')).tap()
    await expect(element(by.id('LoginUserPrompt'))).toBeVisible()
    await expect(element(by.id('LoginPassPrompt'))).toBeVisible()
    await expect(element(by.id('LoginButton'))).toBeVisible()
    await expect(element(by.id('RegisterButton'))).toBeVisible()
  })
  
})
