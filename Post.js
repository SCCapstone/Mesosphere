import React from 'react'
import { View, Text, Alert, TouchableOpacity } from 'react-native'
import { generatePostID, getUser, setScreen, styles, PAGES } from './Utility'

// Tasks:
// Posts must consist of plaintext and optional image components
// Users must be able to attach images via a pointer to their phone library
// Posts generate unique IDs after checking with firebase
// Posts have associated score variables
// Post data is to be stored locally

export class Post extends React.Component {
  // Post objects will be constructed from postPage() prompt
  constructor (postID, mediaContent, textContent, score, timestamp) {
    super()
    this.postID = postID
    this.mediaContent = mediaContent
    this.textContent = textContent
    // TODO(Gazdecki) Consider counting each type of vote seperately.
    this.stateOfScore = {
      score :1
    }
    this.incrementScore=this.incrementScore.bind(this)
    this.timestamp = timestamp
  }

  incrementScore() {
    console.log("Upvote button pressed, score is now: "
                + this.StateOfScore.score)
    alert("func called!")
    // Accessor for this is auto-generated by React. Thanks.
    this.setStateOfScore({score : this.stateOfScore.score + 1})
  }

  getID () {
    return this.postID
  }
}  // End of Post Class.
// TODO(Gazdecki) Consider compressing both buttons into a set of one function.

// call with postText$.get() and postMedia$.get() as the two parameters
export async function savePost (text, media) { 
  if (text.length > 50) {
    Alert.alert('Post too long',
                'Posts can be, at most, 50 characers.',
                { text: 'OK.' })
  }
  // Post(postID, mediaContent, textContent, score, timestamp)
  const new_post = new Post(generatePostID(), null, text, 1,
                            new Date().toString())
  const user = getUser()
  user.addPost(new_post)
  user.storeLocally()
  setScreen(PAGES.VIEWPOSTS)
}

export function renderPost (post) {
  const p = post.item  // Okay I'll fuckin' bite, what the hell is post.item?
  return (
    <View style={styles.postContainer}>
      <Text style={styles.postContainerText}>Post ID: {p.postID} </Text>
      <Text style={styles.postContainerText}>{p.timestamp} </Text>
      {/**If no media content, then don't render it lmao. */}
      {(p.mediaContent != null) && <Text style={styles.postContainerText}>
        Media content: {p.mediaContent} </Text>}
      <Text style={styles.postContainerText}>
        Text content: {p.textContent} </Text>
      <Text style={styles.postContainerText}>
        Score: {p.stateOfScore.score} </Text>
      {/**TODO(Gazdecki) Need to create a {styles.voteBtn} */}
      {/**Side-by-Side visually.*/}
      {/**TODO(all) Best way to force 1-person:1-vote on each post? */}
      {/**Upvote Button. */}
      <TouchableOpacity
        style={styles.postBtn} onPress={
          () => { alert("button pressed!") && p.incrementScore }
        }
      >
        <Text style={styles.buttonText}> Upvote </Text>
      </TouchableOpacity>
      {/**Downvote Button. */}
{/**
      <TouchableOpacity
        style={styles.postBtn} onPress={
          () => { p.decrementScore }
        }
      >
        <Text style={styles.buttonText}> Downvote </Text>
      </TouchableOpacity>
*/}
    </View>
  )
} // TO BE FORMATTED TODO(Gazdecki)
